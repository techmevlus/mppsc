{"ast":null,"code":"var _jsxFileName = \"P:\\\\mppsc\\\\mppsc\\\\src\\\\QuizComponents\\\\Timer.js\";\nimport React from 'react';\n/*export default function countdouwnTimer() {\r\n  const [counter, setCounter] = React.useState(120);\r\n\r\n\r\n  React.useEffect(() => {\r\n    const timer =\r\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\r\n    return () => clearInterval(timer);\r\n  }, [counter]);\r\n\r\n  return (\r\n    <div>\r\n      <div>Countdown: {counter}</div>\r\n    </div>\r\n  );\r\n}*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.timerInit = () => {\n      const {\n        startDate\n      } = this.props;\n      console.log(startDate);\n      const now = new Date().getTime();\n\n      if (!startDate) {\n        this.setState({\n          expired: true\n        });\n        return;\n      }\n\n      const countDownStartDate = new Date(startDate).getTime();\n      const distance = countDownStartDate - now;\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(distance % (1000 * 60) / 1000); // For countdown is finished\n\n      if (distance < 0) {\n        clearInterval(this.countDownId);\n        this.setState({\n          days: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n          expired: true\n        });\n        return;\n      }\n\n      this.setState({\n        days,\n        hours,\n        minutes,\n        seconds,\n        expired: false\n      });\n    };\n\n    this.countDownId = null;\n    this.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 10,\n      expired: false\n    };\n  }\n\n  componentDidMount() {\n    this.countDownId = setInterval(this.timerInit, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.countDownId) {\n      clearInterval(this.countDownId);\n    }\n  }\n\n  render() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds,\n      expired\n    } = this.state;\n\n    if (expired) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expired\",\n        children: \"Expired :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [days, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [hours, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"h\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [minutes, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"m\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [seconds, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["P:/mppsc/mppsc/src/QuizComponents/Timer.js"],"names":["React","Timer","Component","constructor","props","timerInit","startDate","console","log","now","Date","getTime","setState","expired","countDownStartDate","distance","days","Math","floor","hours","minutes","seconds","clearInterval","countDownId","state","componentDidMount","setInterval","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n/*export default function countdouwnTimer() {\r\n  const [counter, setCounter] = React.useState(120);\r\n\r\n\r\n  React.useEffect(() => {\r\n    const timer =\r\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\r\n    return () => clearInterval(timer);\r\n  }, [counter]);\r\n\r\n  return (\r\n    <div>\r\n      <div>Countdown: {counter}</div>\r\n    </div>\r\n  );\r\n}*/\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.countDownId = null;\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 10,\r\n      expired: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.countDownId = setInterval(this.timerInit, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.countDownId) {\r\n      clearInterval(this.countDownId);\r\n    }\r\n  }\r\n\r\n  timerInit = () => {\r\n    const { startDate } = this.props;\r\n    console.log(startDate);\r\n    const now = new Date().getTime();\r\n    if (!startDate) {\r\n      this.setState({ expired: true });\r\n      return;\r\n    }\r\n    const countDownStartDate = new Date(startDate).getTime();\r\n    const distance = countDownStartDate - now;\r\n    const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor(\r\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n    // For countdown is finished\r\n    if (distance < 0) {\r\n      clearInterval(this.countDownId);\r\n      this.setState({\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        expired: true\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ days, hours, minutes, seconds, expired: false });\r\n  };\r\n\r\n  render() {\r\n    const { days, hours, minutes, seconds, expired } = this.state;\r\n    if (expired) {\r\n      return <div className=\"expired\">Expired :(</div>;\r\n    }\r\n    return (\r\n      <div className=\"timer\">\r\n        <div>\r\n          {days}\r\n          <span>d</span>\r\n        </div>\r\n        <div>\r\n          {hours}\r\n          <span>h</span>\r\n        </div>\r\n        <div>\r\n          {minutes}\r\n          <span>m</span>\r\n        </div>\r\n        <div>\r\n          {seconds}\r\n          <span>s</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}